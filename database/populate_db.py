#!/usr/bin/env python3
"""
Database Population Script for AI Wave Optimization Agent

This script populates the PostgreSQL database with synthetic data
generated by the synthetic_data_generator.py script.
"""

import json
import psycopg2
from datetime import datetime
from pathlib import Path
import sys
from typing import Dict, List, Any


class DatabasePopulator:
    """Handles population of the PostgreSQL database with synthetic data."""
    
    def __init__(self, host: str = "localhost", port: int = 5433, 
                 database: str = "warehouse_opt", user: str = "wave_user", 
                 password: str = "wave_password"):
        """Initialize database connection parameters."""
        self.host = host
        self.port = port
        self.database = database
        self.user = user
        self.password = password
        self.conn = None
        self.cursor = None
    
    def connect(self):
        """Establish database connection."""
        try:
            self.conn = psycopg2.connect(
                host=self.host,
                port=self.port,
                database=self.database,
                user=self.user,
                password=self.password
            )
            self.cursor = self.conn.cursor()
            print(f"‚úÖ Connected to PostgreSQL database: {self.database}")
        except Exception as e:
            print(f"‚ùå Failed to connect to database: {e}")
            sys.exit(1)
    
    def disconnect(self):
        """Close database connection."""
        if self.cursor:
            self.cursor.close()
        if self.conn:
            self.conn.close()
        print("üîå Database connection closed")
    
    def load_synthetic_data(self, scenario_type: str = "mixed"):
        """Load synthetic data for a specific scenario."""
        if not self.cursor or not self.conn:
            print("‚ùå Database connection not established")
            return False
            
        data_file = Path(f"generated_data/synthetic_data_{scenario_type}.json")
        
        if not data_file.exists():
            print(f"‚ùå Data file not found: {data_file}")
            return False
        
        print(f"üìÇ Loading data from: {data_file}")
        
        try:
            with open(data_file, 'r', encoding='utf-8') as f:
                data = json.load(f)
            
            # Clear existing data (optional - comment out if you want to keep existing data)
            self._clear_existing_data()
            
            # Populate tables
            self._insert_workers(data['workers'])
            self._insert_equipment(data['equipment'])
            self._insert_skus(data['skus'])
            self._insert_customers(data['customers'])
            self._insert_orders(data['orders'])
            
            self.conn.commit()
            print(f"‚úÖ Successfully loaded {scenario_type} scenario data")
            return True
            
        except Exception as e:
            if self.conn:
                self.conn.rollback()
            print(f"‚ùå Error loading data: {e}")
            return False
    
    def _clear_existing_data(self):
        """Clear existing data from all tables."""
        if not self.cursor:
            return
            
        print("üßπ Clearing existing data...")
        
        # Delete in reverse order of dependencies
        tables = [
            'optimization_schedules',
            'optimization_runs', 
            'order_items',
            'orders',
            'customers',
            'skus',
            'equipment',
            'worker_skills',
            'workers'
        ]
        
        for table in tables:
            self.cursor.execute(f"DELETE FROM {table}")
            print(f"   Cleared {table}")
    
    def _insert_workers(self, workers: List[Dict]):
        """Insert workers data."""
        if not self.cursor:
            return
            
        print(f"üë• Inserting {len(workers)} workers...")
        
        for worker in workers:
            # Insert worker
            self.cursor.execute("""
                INSERT INTO workers (warehouse_id, name, hourly_rate, efficiency_factor, max_hours_per_day, reliability_score)
                VALUES (%s, %s, %s, %s, %s, %s)
                RETURNING id
            """, (
                worker['warehouse_id'],
                worker['name'],
                worker['hourly_rate'],
                worker['efficiency_factor'],
                worker['max_hours_per_day'],
                worker['reliability_score']
            ))
            result = self.cursor.fetchone()
            if result:
                worker_id = result[0]
                # Insert worker skills
                for skill in worker['skills']:
                    self.cursor.execute("""
                        INSERT INTO worker_skills (worker_id, skill)
                        VALUES (%s, %s)
                    """, (worker_id, skill))
    
    def _insert_equipment(self, equipment: List[Dict]):
        """Insert equipment data."""
        if not self.cursor:
            return
            
        print(f"üè≠ Inserting {len(equipment)} equipment items...")
        
        for eq in equipment:
            self.cursor.execute("""
                INSERT INTO equipment (warehouse_id, name, equipment_type, capacity, hourly_cost, 
                                     efficiency_factor, maintenance_frequency, current_utilization)
                VALUES (%s, %s, %s, %s, %s, %s, %s, %s)
            """, (
                eq['warehouse_id'],
                eq['name'],
                eq['equipment_type'],
                eq['capacity'],
                eq['hourly_cost'],
                eq['efficiency_factor'],
                eq['maintenance_frequency'],
                eq['current_utilization']
            ))
    
    def _insert_skus(self, skus: List[Dict]):
        """Insert SKUs data."""
        if not self.cursor:
            return
            
        print(f"üì¶ Inserting {len(skus)} SKUs...")
        
        for sku in skus:
            self.cursor.execute("""
                INSERT INTO skus (warehouse_id, name, category, zone, pick_time_minutes, pack_time_minutes,
                                volume_cubic_feet, weight_lbs, demand_pattern, shelf_life_days)
                VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
            """, (
                sku['warehouse_id'],
                sku['name'],
                sku['category'],
                sku['zone'],
                sku['pick_time_minutes'],
                sku['pack_time_minutes'],
                sku['volume_cubic_feet'],
                sku['weight_lbs'],
                sku['demand_pattern'],
                sku['shelf_life_days']
            ))
    
    def _insert_customers(self, customers: List[Dict]):
        """Insert customers data."""
        if not self.cursor:
            return
            
        print(f"üë§ Inserting {len(customers)} customers...")
        
        for customer in customers:
            self.cursor.execute("""
                INSERT INTO customers (name, customer_type, order_frequency, avg_order_value,
                                     priority_tendency, deadline_preference)
                VALUES (%s, %s, %s, %s, %s, %s)
            """, (
                customer['name'],
                customer['customer_type'],
                customer['order_frequency'],
                customer['avg_order_value'],
                customer['priority_tendency'],
                customer['deadline_preference']
            ))
    
    def _insert_orders(self, orders: List[Dict]):
        """Insert orders and order items data."""
        if not self.cursor:
            return
            
        print(f"üìã Inserting {len(orders)} orders...")
        
        for order in orders:
            # Get customer ID
            self.cursor.execute("SELECT id FROM customers WHERE name = %s", (order['customer'],))
            customer_result = self.cursor.fetchone()
            customer_id = customer_result[0] if customer_result else None
            
            # Insert order
            self.cursor.execute("""
                INSERT INTO orders (warehouse_id, customer_id, customer_name, customer_type, priority,
                                  created_at, shipping_deadline, total_pick_time, total_pack_time,
                                  total_volume, total_weight, status)
                VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
                RETURNING id
            """, (
                order['warehouse_id'],
                customer_id,
                order['customer'],
                order['customer_type'],
                order['priority'],
                order['created_at'],
                order['shipping_deadline'],
                order['total_pick_time'],
                order['total_pack_time'],
                order['total_volume'],
                order['total_weight'],
                order['status']
            ))
            result = self.cursor.fetchone()
            if result:
                order_id = result[0]
                # Insert order items
                for item in order['items']:
                    # Look up SKU ID by name
                    self.cursor.execute("SELECT id FROM skus WHERE name = %s", (item['sku_id'],))
                    sku_result = self.cursor.fetchone()
                    sku_id = sku_result[0] if sku_result else None
                    if sku_id is None:
                        print(f"‚ùå SKU not found: {item['sku_id']}")
                        continue
                    self.cursor.execute("""
                        INSERT INTO order_items (order_id, sku_id, quantity, pick_time, pack_time, volume, weight)
                        VALUES (%s, %s, %s, %s, %s, %s, %s)
                    """, (
                        order_id,
                        sku_id,
                        item['quantity'],
                        item['pick_time'],
                        item['pack_time'],
                        item['volume'],
                        item['weight']
                    ))
    
    def get_database_stats(self) -> Dict[str, int]:
        """Get statistics about the populated database."""
        if not self.cursor:
            return {}
            
        stats = {}
        
        tables = ['workers', 'equipment', 'skus', 'customers', 'orders', 'order_items']
        
        for table in tables:
            self.cursor.execute(f"SELECT COUNT(*) FROM {table}")
            result = self.cursor.fetchone()
            stats[table] = result[0] if result else 0
        
        # Get worker skills count
        self.cursor.execute("SELECT COUNT(*) FROM worker_skills")
        result = self.cursor.fetchone()
        stats['worker_skills'] = result[0] if result else 0
        
        return stats
    
    def print_database_stats(self):
        """Print database statistics."""
        if not self.cursor:
            return
            
        stats = self.get_database_stats()
        
        print("\nüìä Database Statistics:")
        print("=" * 40)
        print(f"üë• Workers: {stats['workers']}")
        print(f"üîß Equipment: {stats['equipment']}")
        print(f"üì¶ SKUs: {stats['skus']}")
        print(f"üë§ Customers: {stats['customers']}")
        print(f"üìã Orders: {stats['orders']}")
        print(f"üì¶ Order Items: {stats['order_items']}")
        print(f"üéØ Worker Skills: {stats['worker_skills']}")
        
        # Get equipment breakdown
        self.cursor.execute("""
            SELECT equipment_type, COUNT(*) 
            FROM equipment 
            GROUP BY equipment_type 
            ORDER BY COUNT(*) DESC
        """)
        
        print("\nüè≠ Equipment Breakdown:")
        for eq_type, count in self.cursor.fetchall():
            print(f"   {eq_type}: {count}")
        
        # Get order priority breakdown
        self.cursor.execute("""
            SELECT priority, COUNT(*) 
            FROM orders 
            GROUP BY priority 
            ORDER BY priority
        """)
        
        print("\nüìã Order Priority Breakdown:")
        for priority, count in self.cursor.fetchall():
            print(f"   Priority {priority}: {count}")


def main():
    """Main function to populate the database."""
    print("üöÄ AI Wave Optimization Agent - Database Population")
    print("=" * 60)
    
    # Initialize populator
    populator = DatabasePopulator()
    
    try:
        # Connect to database
        populator.connect()
        
        # Load data for different scenarios
        scenarios = ["mixed", "bottleneck", "deadline", "inefficient"]
        
        for scenario in scenarios:
            print(f"\nüéØ Loading {scenario} scenario...")
            success = populator.load_synthetic_data(scenario)
            
            if success:
                populator.print_database_stats()
            else:
                print(f"‚ùå Failed to load {scenario} scenario")
                break
        
        print("\nüéâ Database population completed!")
        
    except Exception as e:
        print(f"‚ùå Error: {e}")
    finally:
        populator.disconnect()


if __name__ == "__main__":
    main() 